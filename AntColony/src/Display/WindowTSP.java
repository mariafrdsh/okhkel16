/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Display;

/**
 *
 * @author Maria Firdausiah
 * 
 * 
 */

import Graph.*;

import javax.swing.*;
import java.awt.*;


public class WindowTSP extends javax.swing.JFrame {

    /**
     * Creates new form WindowTSP
     */
    
     private static final int WIDTH = 600;
    private static final int HEIGHT = 600 / 16*9;
    private static final int OFFSET = 40;
    private static final int CITY_SIZE = 6;

    private Panel panel;
    private Node[] nodes;
    private int maxX, maxY;
    private double scaleX, scaleY;

    public WindowTSP(Node[] nodes) {
       this.nodes = nodes;
        setScale();
        panel = createPanel();
        setWindowProperties();
    }

    private WindowTSP() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public void draw (Node[] chromosome) {
        this.nodes = chromosome;
        panel.repaint();
    }
    
     private Panel createPanel () {
        Panel panel = new Panel();
        Container cp = getContentPane();
        cp.add(panel);
        panel.setPreferredSize(new Dimension(WIDTH, HEIGHT));
        return panel;
    }

    private void setWindowProperties () {
        int sWidth = (int)Toolkit.getDefaultToolkit().getScreenSize().getWidth()/2;
        int sHeight = (int)Toolkit.getDefaultToolkit().getScreenSize().getHeight()/2;
        int x = sWidth - (WIDTH / 2);
        int y = sHeight - (HEIGHT / 2);
        setLocation(x, y);
        setResizable(false);
        pack();
        setTitle("Traveling Salesman Problem");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setVisible(true);
    }

    /**
     * Sets the scale for the drawing so that all the nodes
     * are drawn inside the window.
     */
    private void setScale () {
        for (Node c : nodes) {
            if (c.getX() > maxX) {
                maxX = c.getX();
            }
            if (c.getY() > maxY) {
                maxY = c.getY();
            }
        }
        scaleX = ((double)maxX) / ((double)WIDTH- OFFSET);
        scaleY = ((double)maxY) / ((double)HEIGHT- OFFSET);
    }

    /**
     * All the drawing is done here.
     */
    private class Panel extends JPanel {

        @Override
        protected void paintComponent(Graphics graphics) {
            super.paintComponent(graphics);
            paintTravelingSalesman((Graphics2D)graphics);
        }

        private void paintTravelingSalesman (Graphics2D graphics) {
            graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            paintCityNames(graphics);
//            paintPheromones(graphics);
            paintChromosome(graphics);
            paintCities(graphics);
        }

        private void paintPheromones (Graphics2D graphics) {

            graphics.setColor(Color.darkGray);
            Node[] array = nodes;

            for (int i = 1; i < array.length; i++) {
                int x1 = (int)(array[i-1].getX() / scaleX + OFFSET / 2);
                int y1 = (int)(array[i-1].getY() / scaleY + OFFSET / 2);
                int x2 = (int)(array[i].getX() / scaleX + OFFSET / 2);
                int y2 = (int)(array[i].getY() / scaleY + OFFSET / 2);

                int x = (x1 + x2) / 2;
                int y = (y1 + y2) / 2;
//                String s = Double.toString(((Edge)array[i]).getPheromone());
//                graphics.drawString(s, x, y);
            }

        }

        private void paintChromosome (Graphics2D graphics) {

            graphics.setColor(Color.darkGray);
            Node[] array = nodes;

            for (int i = 1; i < array.length; i++) {
                int x1 = (int)(array[i-1].getX() / scaleX + OFFSET / 2);
                int y1 = (int)(array[i-1].getY() / scaleY + OFFSET / 2);
                int x2 = (int)(array[i].getX() / scaleX + OFFSET / 2);
                int y2 = (int)(array[i].getY() / scaleY + OFFSET / 2);
                graphics.drawLine(x1, y1, x2, y2);
            }

        }

        private void paintCities (Graphics2D graphics) {
            graphics.setColor(Color.darkGray);
            for (Node c : nodes) {
                int x = (int)((c.getX()) / scaleX - CITY_SIZE/2 + OFFSET / 2);
                int y = (int)((c.getY()) / scaleY - CITY_SIZE/2 + OFFSET / 2);
                graphics.fillOval(x, y, CITY_SIZE, CITY_SIZE);
            }
        }

        private void paintCityNames (Graphics2D graphics) {
            graphics.setColor(new Color(200, 200, 200));
            for (Node c : nodes) {
                int x = (int)((c.getX()) / scaleX - CITY_SIZE/2 + OFFSET/2);
                int y = (int)((c.getY()) / scaleY - CITY_SIZE/2 + OFFSET/2);
                graphics.fillOval(x, y, CITY_SIZE, CITY_SIZE);
                int fontOffset = getFontMetrics(graphics.getFont()).stringWidth(c.getName())/2-2;
                graphics.drawString(c.getName(), x-fontOffset, y-3);
            }
        }
}
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WindowTSP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WindowTSP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WindowTSP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WindowTSP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WindowTSP().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
